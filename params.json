{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Simple and intuitive MVC web framework for node.js","name":"Agni","body":"#agni\r\n\r\nSimple and intuitive MVC web framework for node.js.\r\n\r\n##Overview\r\n\r\nAgni is a web framework built on top of Express, based on the principle\r\nof _convention over configuration_.\r\n\r\nIts purpose is making access to the various components easier, so that you can forget about routes and paths and focus on what your application does.\r\n\r\nIt does not include any database abstraction system, but leaves this choice to the developer.\r\n\r\n##Quick start\r\n\r\n1. Install agni globally: `npm install agni -g`.\r\n\r\n1. Create an application called welcome: `agni create welcome`\r\n\r\n1. Enter the newly created directory: `cd welcome`.\r\n\r\n1. Install all dependencies: `npm install`.\r\n\r\n1. Run the application: `nmp start`.\r\n\r\n1. Point your browser to `localhost:3000`.\r\n\r\n1. If you see the welcome message, it works!\r\n\r\n##Architecture\r\n\r\nAgni is loosely based on the [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)\r\ndevelopment pattern.\r\n\r\nThe three main application components are:\r\n\r\n- the **Model**, which is the data access layer;\r\n\r\n- the **View**, which is the part of the application that is \"visible\" to the user;\r\n\r\n- the **Controller**, which acts as an intermediary between the other two components,\r\ntaking data from the Model and sending it to the View.\r\n\r\nA fourth component is also available, that is the **Service** layer.\r\nThe purpose of this layer is encapsulating business logic in a high level interface\r\navailable to the controller, freeing the latter from overload and duplication.\r\n\r\nOf course, you are free to use only the components that you need. Agni does not oblige you to use Models and Services if you do not need them.\r\n\r\n##Directory structure\r\n\r\nThe root application directory is `app`.\r\n\r\nInside `app`, you have `controllers`, `models`, `services` and `views`, where you can store the modules belonging to the corresponding components.\r\n\r\nIn `config` there is a configuration file `config.js` and an initialization script `init.js`.\r\n\r\nIn `static` you can put all your static resources like images, javascript files, style sheet and so on.\r\n\r\n##Routing\r\n\r\nThere is no explicit route definition in Agni. The routing mechanism is based on controller paths and method names.\r\n\r\n##Controllers\r\n\r\nAgni uses a common routing system, similar to what is used in [CodeIgniter](http://codeigniter.com/) and other frameworks.\r\n\r\nIf you split the requested URL in segments:\r\n\r\n`mywebsite.com/module/function/arg1/arg2`\r\n\r\n1. The first URL segment is the module that should be required.\r\n\r\n1. The second segment is the function that should be called.\r\n\r\n1. The third, and any other segments, are the arguments that should be passed to the function.\r\n\r\nSo, for example, a request to `mywebsite.com/article/show/173`, would require the `article` module from the `controllers` folder, and execute the exported function `show` with `173` as parameter.\r\n\r\nMore or less equivalent to doing:\r\n\r\n```JavaScript\r\nvar article = require('./app/controllers/article');\r\narticle.show(173);\r\n```\r\n\r\nIf you omit the method name, it will look for a function called `nil` and execute it.\r\n\r\nFor example, a request to `mywebsite.com/articles` will require the `articles` module and execute the `nil` function.\r\n\r\nYou can create namespaces, by simply putting your controllers in sub-directories.\r\n\r\nFor example, a request to `mywebsite.com/blog/article/show/173`, would require the article module from the `controllers/blog` folder, and execute the exported function `show` with `173` as parameter.\r\n\r\nInside controllers, you can access the standard **request** and **response** objects as `this.req` as `this.res`, respectively.\r\n\r\n##Views\r\n\r\nRendering views is very easy. Inside a controller, execute:\r\n\r\n`this.render(viewName, locals, callbak)`.\r\n\r\nIf you omit the view name, it will be the same as your controller module. For example, let's suppose you have a controller module called `hello`:\r\n\r\n```JavaScript\r\n//File: app/controllers/hello.js\r\n\r\nexports.nil = function() {\r\n  //This will render the view 'app/views/hello.html'\r\n  this.render();\r\n}\r\n```\r\n\r\n##Models\r\n\r\nTo access a model, you can use `this.model(modelName)` from any controller or service.\r\n\r\n##Services\r\n\r\nTo access a service, you can use `this.service(serviceName)` from any controller or service.\r\n","google":""}