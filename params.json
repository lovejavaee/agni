{"name":"Agni","tagline":"Simple and intuitive MVC web framework for node.js","body":"#agni\r\n\r\nSimple and intuitive MVC web framework for node.js.\r\n\r\n##Overview\r\n\r\nAgni is a web framework built on top of Express.\r\n\r\nIt adds a thin layer of abstraction which makes route definition and directory organization easier, without giving up the full power and flexibility of Express.\r\n\r\nIt does not include any database abstraction system, but leaves this choice to the developer.\r\n\r\n##Quick start\r\n\r\n1. Install agni globally: `npm install agni -g`.\r\n\r\n1. Create an application called welcome: `agni create welcome`\r\n\r\n1. Enter the newly created directory: `cd welcome`.\r\n\r\n1. Install all dependencies: `npm install`.\r\n\r\n1. Run the application: `npm start`.\r\n\r\n1. Point your browser to `localhost:3000`.\r\n\r\n1. If you see the welcome message, it works!\r\n\r\n##Directory structure\r\n\r\nAgni is loosely based on the [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)\r\ndevelopment pattern.\r\n\r\nThe root application directory is `app`.\r\n\r\nInside `app`, you have the following directories:\r\n\r\n- `controllers`, `models`, and `views`, where you can store the modules belonging to the corresponding MVC components.\r\n\r\n- an unopinionated `libraries` directory.\r\n\r\n- `config`, which contains three files: `config.js`, with the application settings, `middleware.js`, where you can define middleware, and `routes.yaml`.\r\n\r\n- `public`, where you can put all your static resources like images, javascript files, style sheet and so on.\r\n\r\n###File extensions\r\n\r\nYou can use the extensions `.controller.js`, `.model.js` and `.lib.js` for more readable file names.\r\n\r\n##Routing\r\n\r\nRoutes are defined in YAML format, in the `app/config/routes.yaml` file (or alternatively as standard javascript objects, but you should rename the file to _route.js_ in that case).\r\n\r\nEach route definition is composed of a label, one or more routes, and an action.\r\n\r\n```yaml\r\n---\r\n\r\nlabel:\r\n  route: verb /path\r\n  action: controller.action\r\n```\r\n\r\nRoutes are composed of 2 segments, separated by a space:\r\n\r\n- an HTTP verb.\r\n- a path.\r\n\r\nActions are composed of 2 segments, separated by a dot (`.`):\r\n\r\n- the first segment is a relative path, based on the `app/controllers` directory. This module can either export a constructor function or individual functions through the `exports` object.\r\n\r\n- the second segment can either be a prototype function or a function exported by the controller through the `exports` object.\r\n\r\nEx.:\r\n```yaml\r\n---\r\n\r\nfoo:\r\n  route: get /foo\r\n  action: foo.index\r\n```\r\n\r\n```javascript\r\n// app/controllers/foo.controller.js\r\n\r\nexports.index = function() {\r\n  this.render('foo');\r\n}\r\n```\r\n\r\n##Controllers\r\n\r\n###Controller properties\r\n\r\nInside controllers, you can access the standard **request** and **response** objects as `this.req` as `this.res`, respectively.\r\n\r\nFor convenience, the following properties are also provided:\r\n\r\n- `this.cookies` (cookies)\r\n\r\n- `this.session` (session)\r\n\r\n- `this.query` (query string)\r\n\r\n- `this.body` (request body)\r\n\r\n\r\n###Controller methods\r\n\r\nInside controllers you also have a `this.url` method, which helps you build URLs from route labels and arguments.\r\n\r\n`url(label, arg1, arg2, ...)` or `url(label, argsArray)`\r\n\r\nEx.:\r\n```yaml\r\nfirstPage:\r\n  route: /home\r\n  action: home.index\r\n```\r\n\r\n```javascript\r\nFooController.prototype.redirectToHome = function() {\r\n  this.res.redirect(this.url('firstPage', 'bar', 'baz'));// Redirects to /home/bar/baz\r\n}\r\n```\r\n\r\n##Views\r\n\r\n###Rendering a view\r\n\r\nRendering views is very easy. Inside a controller, execute:\r\n\r\n`this.render(viewName, locals, callback)`.\r\n\r\nIf you omit the view name, it will be the same as your controller module. For example, let's suppose you have a controller module called `hello`:\r\n\r\n```JavaScript\r\n//File: app/controllers/hello.controller.js\r\n\r\nexports.index = function() {\r\n  //This will render the view 'app/views/hello.jade'\r\n  this.render();\r\n}\r\n```\r\n\r\n###View functions\r\n\r\nInside views, you can use the `url` function to build URLs from route labels.\r\n\r\nEx.:\r\n\r\n```javascript\r\na(href='#{url(\"firstPage\", \"bar\", \"baz\")}')\r\n```\r\n\r\nSee the [Controller methods](#controllers) paragraph for more details.\r\n\r\n##Models\r\n\r\nTo access a model, you can use `this.model(modelName)` from any controller or library.\r\nIt will return the same object as `require(__dirname + '../models/' + modelName)`.\r\n\r\nExample:\r\n\r\n```JavaScript\r\n//File: app/models/article.model.js\r\n\r\nfunction ArticleModel() {\r\n  this.db = getMyDb();\r\n}\r\n\r\nArticleModel.prototype.getArticle = function(id, callback) {\r\n  // Read article from DB\r\n  this.db.findArticleById(id, callback);\r\n}\r\n\r\nmodule.exports = ArticleModel;\r\n```\r\n\r\nAnd in the controller:\r\n\r\n```JavaScript\r\n//File: app/controllers/article.controller.js\r\n\r\nexports.read = function(id) {\r\n  var self = this;\r\n\r\n  var ArticleModel = this.model('article');\r\n  var articleModel = new ArticleModel();\r\n  articleModel.getArticle(id, function(err, data) {\r\n    if(! err) {\r\n      self.render('read_article', {articleData: data});\r\n    }\r\n  });\r\n}\r\n```\r\n\r\n##Libraries\r\n\r\nTo access a library, you can use `this.lib(libraryName)` from any controller or library.\r\nIt will return the same object as `require(__dirname + '../libraries/' + libraryName)`.\r\n\r\nExample:\r\n\r\n```JavaScript\r\n//File: app/libraries/string_helpers.js\r\n\r\nexports.reverse = function(str) {\r\n  return str.split('').reverse().join('');\r\n}\r\n```\r\n\r\nIn the controller:\r\n\r\n```JavaScript\r\nexports.read = function() {\r\n  var str = 'Hello';\r\n  var reversed = this.lib('string_helpers').reverse(str);\r\n  this.render({reversedHello: reversed});\r\n}\r\n```\r\n\r\n##Configuration\r\n\r\nIn all controller, model and library functions you can access the Express `app.settings` object as `this.settings`.\r\n\r\n\r\n##Error handling\r\n\r\nBecause Agni uses regular Connect middleware, you can pass errors to the `next` function, available inside controller functions as `this.next`. This will trigger a 500 Internal Server Error and send the error message to stderr. HTML error pages are in the `views/errors` directory.\r\n\r\nExample:\r\n\r\n```JavaScript\r\n//File: app/controllers/article.js\r\n\r\nexports.read = function(id) {\r\n  var self = this;\r\n  \r\n  this.model('article').getArticle(id, function(err, result) {\r\n    if(! err) {\r\n      self.res.json(result);\r\n    } else {\r\n      self.next(err);\r\n    }\r\n  });\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}