{"google":"","tagline":"Simple and intuitive MVC web framework for node.js","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Agni","body":"#agni\r\n\r\nSimple and intuitive MVC web framework for node.js.\r\n\r\n##Overview\r\n\r\nAgni is a web framework built on top of Express, based on the principle\r\nof _convention over configuration_.\r\n\r\nIts purpose is making access to the various components easier, so that you can forget about routes and paths and focus on what your application does.\r\n\r\nIt does not include any database abstraction system, but leaves this choice to the developer.\r\n\r\n##Quick start\r\n\r\n1. Install agni globally: `npm install agni -g`.\r\n\r\n1. Create an application called welcome: `agni create welcome`\r\n\r\n1. Enter the newly created directory: `cd welcome`.\r\n\r\n1. Install all dependencies: `npm install`.\r\n\r\n1. Run the application: `npm start`.\r\n\r\n1. Point your browser to `localhost:3000`.\r\n\r\n1. If you see the welcome message, it works!\r\n\r\n##Architecture\r\n\r\nAgni is loosely based on the [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)\r\ndevelopment pattern.\r\n\r\nThe three main application components are:\r\n\r\n- the **Model**, which is the data access layer;\r\n\r\n- the **View**, which is the part of the application that is \"visible\" to the user;\r\n\r\n- the **Controller**, which acts as an intermediary between the other two components,\r\ntaking data from the Model and sending it to the View.\r\n\r\nA fourth component is also available, that is the **Service** layer.\r\nThe purpose of this layer is encapsulating business logic in a high level interface\r\navailable to the controller, freeing the latter from overload and duplication.\r\n\r\nOf course, you are free to use only the components that you need. Agni does not oblige you to use Models and Services if you do not need them.\r\n\r\n##Directory structure\r\n\r\nThe root application directory is `app`.\r\n\r\nInside `app`, you have the following directories:\r\n\r\n- `controllers`, `models`, `services` and `views`, where you can store the modules belonging to the corresponding components.\r\n\r\n- `config`, which contains three files: `config.js`, with the application settings, `init.js`, where you can define middleware, and `server.js`, where you can set whether to run the server as a daemon (with forever) or not.\r\n\r\n- `public`, where you can put all your static resources like images, javascript files, style sheet and so on.\r\n\r\n###File extensions\r\n\r\nYou can use the extensions `.controller.js`, `.model.js` and `.service.js` for more readable file names.\r\n\r\n##Routing\r\n\r\nThere is no explicit route definition in Agni. The routing mechanism is based on controller paths, function names and (optionally) HTTP methods.\r\n\r\n##Controllers\r\n\r\n###The Controller as a router\r\n\r\nAgni uses a common routing system, similar to what is used in [CodeIgniter](http://codeigniter.com/) and other popular frameworks.\r\n\r\nIf you split the requested URL in segments:\r\n\r\n`mywebsite.com/module/function/arg1/arg2`\r\n\r\n1. The first URL segment is the module that should be required.\r\n\r\n1. The second segment is the function that should be called.\r\n\r\n1. The third, and any other segments, are the arguments that should be passed to the function.\r\n\r\nSo, for example, a request to `mywebsite.com/article/show/173`, would require the `article` module from the `controllers` folder, and execute the exported function `show` with `173` as parameter.\r\n\r\nMore or less equivalent to doing:\r\n\r\n```JavaScript\r\nvar article = require('./app/controllers/article');\r\narticle.show(173);\r\n```\r\n\r\nIf you omit the function name, it will look for a function called `nil` and execute it.\r\n\r\nFor example, a request to `mywebsite.com/articles` will require the `articles` module and execute the `nil` function.\r\n\r\nYou can create namespaces, by simply putting your controllers in sub-directories.\r\n\r\nFor example, a request to `mywebsite.com/blog/article/show/173`, would require the article module from the `controllers/blog` folder, and execute the exported function `show` with `173` as parameter.\r\n\r\n###Controller properties\r\n\r\nInside controllers, you can access the standard **request** and **response** objects as `this.req` as `this.res`, respectively.\r\n\r\nFor convenience, the following properties are also provided:\r\n\r\n- `this.cookies` (cookies)\r\n\r\n- `this.session` (cookie-based session)\r\n\r\n- `this.query` (query string)\r\n\r\n- `this.body` (request body)\r\n\r\n###Resourceful routing\r\n\r\nAgni has a minimalistic interpretation of resourceful routing. If it cannot find any action matching the URI segments, it looks for a CRUD action corresponding to the HTTP method of the request.\r\n\r\nLet's suppose we have a controller called `article`, which looks like this:\r\n\r\n```JavaScript\r\n//File: app/controllers/article.js\r\n\r\n//GET\r\nexports.read = function(id) {\r\n  //Read\r\n}\r\n\r\n//POST\r\nexports.create = function() {\r\n  //Create\r\n}\r\n\r\n//PUT\r\nexports.update = function(id) {\r\n  //Update\r\n}\r\n\r\n//DELETE\r\nexports.del = function(id) {\r\n  //Delete\r\n}\r\n\r\n/* Custom actions... */\r\n//GET edit\r\nexports.edit = function(id) {\r\n\r\n}\r\n\r\n//GET foo\r\nexports.foo = function() {\r\n\r\n}\r\n```\r\n\r\nHere is how the requests will be mapped:\r\n\r\n- `GET /article/1` => `article.read(1)`\r\n\r\n- `POST /article` => `article.create()`\r\n\r\n- `PUT /article/1` => `article.update(1)`\r\n\r\n- `DELETE /article/1` => `article.del(1)`\r\n\r\n- `GET /article/edit/1` => `article.edit(1)`\r\n\r\n- `GET /article/foo` => `article.foo()`\r\n\r\nIf for some reason you want to disable resourceful routing, set the `resource` property to `false` in the controller.\r\n\r\n##Views\r\n\r\n###Rendering a view\r\n\r\nRendering views is very easy. Inside a controller, execute:\r\n\r\n`this.render(viewName, locals, callback)`.\r\n\r\nIf you omit the view name, it will be the same as your controller module. For example, let's suppose you have a controller module called `hello`:\r\n\r\n```JavaScript\r\n//File: app/controllers/hello.js\r\n\r\nexports.nil = function() {\r\n  //This will render the view 'app/views/hello.html'\r\n  this.render();\r\n}\r\n```\r\n\r\nIt will render the view `hello.html`.\r\n\r\n##Models\r\n\r\nTo access a model, you can use `this.model(modelName)` from any controller or service function.\r\nIt will return the same object as `require(__dirname + '../models/' + modelName)`.\r\n\r\nIf you omit the name, it will be the same as your controller module.\r\n\r\nExample:\r\n\r\n```JavaScript\r\n//File: app/models/article.js\r\n\r\nexports.readArticle = function(id, callback) {\r\n  //Read article from DB\r\n  //...\r\n\r\n  callback(err, articleData);\r\n}\r\n```\r\n\r\nAnd in the controller:\r\n\r\n```JavaScript\r\n//File: app/controllers/article.js\r\n\r\nexports.read = function(id) {\r\n  var self = this;\r\n\r\n  this.model().readArticle(id, function(err, data) {\r\n    if(! err) {\r\n      self.render('read_article', {articleData: data});\r\n    }\r\n  });\r\n}\r\n```\r\n\r\n##Services\r\n\r\nTo access a service, you can use `this.service(serviceName)` from any controller or service function.\r\nIt will return the same object as `require(__dirname + '../services/' + serviceName)`.\r\n\r\nIf you omit the name, it will be the same as your controller module.\r\n\r\nExample:\r\n\r\n```JavaScript\r\n//File: app/services/string_helpers.js\r\n\r\nexports.reverse = function(str) {\r\n  return str.split('').reverse().join('');\r\n}\r\n```\r\n\r\nIn the controller:\r\n\r\n```JavaScript\r\nexports.nil = function() {\r\n  var str = 'Hello';\r\n  var reversed = this.service('string_helpers').reverse(str);\r\n  this.render({reversedHello: reversed});\r\n}\r\n```\r\n\r\n###Service constructor\r\n\r\nIf the service returns a constructor function, you can use the `construct()` convenience method:\r\n\r\n```Javascript\r\n//File: app/services/circle.js\r\n\r\nfunction Circle(radius) {\r\n  this.radius = radius;\r\n}\r\n\r\nCircle.prototype.getArea = function() {\r\n  return (Math.PI * this.radius * this.radius);\r\n}\r\n\r\nmodule.exports = Circle;\r\n```\r\n\r\nIn the controller:\r\n\r\n```JavaScript\r\nexports.nil = function() {\r\n  var area = this.service('circle').construct(3).getArea();\r\n}\r\n```\r\n\r\nwhich is equivalent to:\r\n\r\n```JavaScript\r\nexports.nil = function() {\r\n  var Circle = this.service('circle');\r\n  var circle = new Circle(3);\r\n  var area = circle.getArea();\r\n}\r\n```\r\n\r\n##Configuration\r\n\r\nIn all controller, model and service functions you can access the Express `app.settings` object as `this.settings`.\r\n\r\nIf you need the settings object in the global scope of a module, you can use the application instance which is exported by `/lib/agni.js`:\r\n\r\n```JavaScript\r\n//File: app/models/foo.js\r\n\r\nvar app = require(__dirname + '../../../lib/agni');\r\nvar env = app.settings.env;\r\n```\r\n\r\n##Error handling\r\n\r\nBecause Agni router is regular Connect middleware, you can pass errors to the `next` function, available inside controller functions as `this.next()`. This will trigger a 500 Internal Server Error and send the error message to stderr. HTML error pages are in the `views/errors` directory.\r\n\r\nExample:\r\n\r\n```JavaScript\r\n//File: app/controllers/article.js\r\n\r\nexports.REST = true;\r\n\r\nexports.read = function(id) {\r\n  var self = this;\r\n  \r\n  this.model().findArticleById(id, function(err, result) {\r\n    if(! err) {\r\n      self.res.json(result);\r\n    } else {\r\n      self.next(err);\r\n    }\r\n  });\r\n}\r\n```\r\n\r\n##Examples\r\n\r\n###Hello world!\r\n\r\n####Controller\r\n\r\n```Javascript\r\n//File: app/controllers/hello.js\r\n\r\nexports.nil = function() {\r\n  this.render();\r\n}\r\n```\r\n\r\n####View\r\n\r\n```HTML\r\n<!-- File: app/views/hello.html -->\r\n\r\n<p>Hello world!</p>\r\n```\r\n\r\nOpen the page `localhost:3000/hello`.\r\n\r\nThat's it!\r\n\r\n###What's your name?\r\n\r\n####Controller\r\n\r\n```JavaScript\r\n//File: app/controllers/hello.js\r\n\r\nexports.myNameIs = function(name) {\r\n  var locals = {name: name}\r\n  this.render('my_name_is', locals);\r\n}\r\n```\r\n\r\n####View\r\n\r\n```\r\n<!-- File: app/views/my_name_is.html -->\r\n<!-- Example with template engine ejs -->\r\n\r\n<p>Hello, <%= name %>.</p>\r\n<p>Nice to meet you!</p>\r\n```\r\n\r\nNow point your browser to `localhost:3000/hello/my-name-is/John`, and see the output.\r\n\r\nPlease note how function names are automatically converted to camelCase.\r\n\r\nSorry if your name is not John :)\r\n"}